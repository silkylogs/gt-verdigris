This is the specification for the virtual machine of gt-verdigris.
Codenamed "glass", it is a little endian machine with a word size of 32 bits.
More than average care has been taken to ensure that all instructions of this
version of the ISA fits within 16 bits, while still retaining the potential for
backwards compatible extension.

//============================================================================\\
|| The instruction set                                                        ||
\\============================================================================//
The possible combinations of instructions ("instruction pages") with the
following criteria are shown below:
- Bytes padded to 32 bits
- Bytes displayed in little endian order
- Numbered in order of evaluation
- Key:
  - x: any hexadecimal literal between 1 to E inclusive
  - R: the register label, between 0 to F inclusive
  - F: the hexadecimal literal F
  - c: a constant hexadecimal number between 0 to F inclusive
1. xR RR __ __             | 3 register operation
2. Fx RR __ __             | 2 register operation
3. FF xR __ __             | 1 register operation
3. FF xR __ __ cc cc cc cc | 1 register operation plus 32 bit constant
4. FF Fx __ __             | 0 register operation
4. FF Fx __ __ cc cc cc cc | 0 register operation plus 32 bit constant

+------------------------------------------------------------------------------+
| The full list of instructions, grouped according to instruction pages:       |
+------------------------------------------------------------------------------+
3 Register operations:
-----------------------
1. addr X Y Z
Full name: add register
Encoding: 1X YZ __ __
Description: Adds the contents of registers Y and Z, then stores the result in
             register X (X = Y + Z).
             Sets overflow or underflow flags.

2. subr X Y Z
Full name: subtract register
Encoding: 2D AB __ __
Description: Subtracts the contents of registers Z from Y, then stores the
             result in register X. (X = Y - Z)
             Sets overflow or underflow flags.

3. reserved_instruction

4. smulr X Y Z
Full name: signed multiply register
Encoding: 4X YZ __ __
Description: Signed multiplies the contents of 32 bit registers X with Y,
             Storing the 64 bit result in the conjoined register Y:Z
             (Y:Z = X * Y)
             Sets overflow and underflow flags. (TODO: validate this)

5. reserved_instruction

6. sdivr X Y Z
Full name: signed divide register
Encoding: 6X YZ __ __
Description: Signed divides the contents of the registers Y with Z,
             storing the result in the register X. (X = Y / Z)
             In case Z is zero, X is set to the maximum or minimum signed 32 bit
             integer depending on whether Y was positive or negative,
             respectively, to approximate, albeit crudely, the value of
             infinity.
             The divide-by-zero flag is set.

7. reserved_instruction

8. sfixmulr X Y Z
Full name: signed fixed poiont multiply register
Encoding: 8X YZ __ __
Description: Signed multiplies the contents of the 32 bit registers Y and Z,
             interpreted as a fixed point number (16.16), adjusting the
             resulting number to fit within said format and storing the result
             in register X (X = Y * Z)
             May overflow or underflow, in which case relevant flags are set.

9. reserved_instruction

10. sfixdivr X Y Z
Full name: signed fixed point divide register
Encoding: AX YZ __ __
Description: Signed divides the contents of the 32 bit registers Y and Z,
             interpreted as a fixed point number (16.16), adjusting the
             resulting number to fit within said format and storing the result
             to register X. (X = Y / Z)
             In case Z is zero, X is set to the maximum or minimum signed 32 bit
             integer depending on whether Y was positive or negative,
             respectively, to approximate, albeit crudely, the value of
             infinity.
             Sets the divide-by-zero flag.

11. cfixsqrtr X Y Z
Full name: complex fixed point square root register
Encoding: BX YZ __ __
Description: Computes the square root of the contents of the register X,
             interpreted as a signed fixed point number (16.16).
             The real and imaginary components of the result are stored in
             registers Y and Z respectively.

12. reserved_instruction X Y Z
Full name: reserved instruction
Encoding: CX YZ __ __
Description: This bit combination is currently reserved. Trying to execute
             it will result in the reserved-instruction flag being set.

13. reserved_instruction X Y Z
Full name: reserved instruction
Encoding: DX YZ __ __
Description: This bit combination is currently reserved. Trying to execute
             it will result in the reserved-instruction flag being set.

14. reserved_instruction X Y Z
Full name: reserved instruction
Encoding: EX YZ __ __
Description: This bit combination is currently reserved. Trying to execute
             it will result in the reserved-instruction flag being set.

2 Register operations:
-----------------------
1. writer X Y
Full name: write register to pointer
Encoding: F1 XY __ __
Description: Writes the contents of X to the memory address pointed to by Y.
             There are no alignment restrictions of Y, but it is considered to
             be good practice to keep the alignment to the word size.

2. readr X Y
Full name: read register from pointer
Encoding: F2 XY __ __
Description: Reads the contents of X from the memory address pointed to by Y.
             There are no alignment restrictions of Y, but it is considered to
             be good practice to keep the alignment to the word size.

3. movr X Y
Full name: move register to register
Encoding: F3 XY __ __
Description: Copies register contents from Y to X. (X = Y)

4. cmpr X Y
Full name: compare registers
Encoding F4 XY __ __
Description: Signed subtracts the contents of registers Y from X, then sets
             the following flags: lt, l, gt, g, e

5. lshiftr X Y
Full name: logical shift register
Encoding: F5 XY __ __
Description: Logically shifts the contents of register X.
             The magnitude of the shift is determined by the magnitude of the
             value of register Y.
             The direction is determined by the sign of the value of register Y,
             which is interpreted as a twos complement binary number. A positive
             value indicates a left shift, else a right shift.

6. ashiftr X Y
Full name: arithmetic shift register
Encoding: F6 XY __ __
Description: Signed multiplies the contents of register X by 2 to the power Y.
             The magnitude of the shift is determined by the magnitude of the
             value of register Y.
             The direction is determined by the sign of the value of register Y,
             which is interpreted as a twos complement binary number. A positive
             value indicates a left shift, else a right shift.

7. rollr X Y
Full name: roll register
Encoding: F7 XY __ __
Description: Rolls the contents of register X by the amount represented by the
             contents of register Y, interpreted as a twos complement signed
             integer. A positive value of Y rolls left, and a negative rolls
             right.

8. andr X Y
Full name: binary and register
Encoding: F8 XY __ __
Description: Computes the binary AND operation of the contents of registers
             X and Y, then stores the result to register X.

9. orr X Y
Full name: binary or register
Encoding: F9 XY __ __
Description: Computes the binary OR operation of the contents of registers
             X and Y, then stores the result to register X.

10. xorr X Y
Full name: binary xor register
Encoding: FA XY __ __
Description: Computes the binary XOR operation of the contents of registers
             X and Y, then stores the result to register X.

11. reserved_instruction X Y
Full name: reserved instruction
Encoding: FB XY __ __
Description: This bit combination is currently reserved. Trying to execute
             it will result in the reserved-instruction flag being set.

12. reserved_instruction X Y
Full name: reserved instruction
Encoding: FC XY __ __
Description: This bit combination is currently reserved. Trying to execute
             it will result in the reserved-instruction flag being set.

13. reserved_instruction X Y
Full name: reserved instruction
Encoding: FD XY __ __
Description: This bit combination is currently reserved. Trying to execute
             it will result in the reserved-instruction flag being set.

14. reserved_instruction X Y
Full name: reserved instruction
Encoding: FE XY __ __
Description: This bit combination is currently reserved. Trying to execute
             it will result in the reserved-instruction flag being set.


1 Register operations:
-----------------------
1. read X const
Full name: read constant to register
Encoding: FF 1X __ __
Description: Copies the 32 bit constant to the register X.

2. write X const
Full name: write register to constant pointer
Encoding: FF 2X __ __
Description: Writes the contents of the register X to the address provided in the constant.

3. mov X const
Full name: Move constant to register
Encoding: FF 3X __ __
Description: Copies the constant provided in the instruction to the register X.

4. callr X
Full name:
Encoding:
Description:

6. cmp X const
Full name:
Encoding:
Description:

7. lshl X const
Full name:
Encoding:
Description:

8. lshr X const
Full name:
Encoding:
Description:

9. ashl X const
Full name:
Encoding:
Description:

10. ashr X const
Full name:
Encoding:
Description:

11. roll X const
Full name:
Encoding:
Description:

13. and X const
Full name:
Encoding:
Description:

14. or X const
Full name:
Encoding:
Description:

14. not X
Full name:
Encoding:
Description:


0 Register operations:
-----------------------
1. nop
Full name:
Encoding:
Description:

2. ret
Full name:
Encoding:
Description:

3. goto const
Full name:
Encoding:
Description:

4. jmp const
Full name:
Encoding:
Description:

5. je const
Full name:
Encoding:
Description:

6. jne const
Full name:
Encoding:
Description:

7. jge const
Full name:
Encoding:
Description:

8. jg const
Full name:
Encoding:
Description:

9. jle const
Full name:
Encoding:
Description:

10. jl const
Full name:
Encoding:
Description:

11. call const
Full name:
Encoding:
Description:

12. calle const
Full name:
Encoding:
Description:

13. callg const
Full name:
Encoding:
Description:

14. callle const
Full name:
Encoding:
Description
