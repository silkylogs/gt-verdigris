This is the specification for the virtual machine of gt-verdigris.
Codenamed "glass", it is a little endian machine with a word size of 32 bits.
More than average care has been taken to ensure that all instructions of this
version of the ISA fits within 16 bits, while still retaining the potential for
backwards compatible extension.

//============================================================================\\
|| The instruction set                                                        ||
\\============================================================================//
The possible combinations of instructions ("instruction pages") with the
following criteria are shown below:
- Bytes padded to 32 bits
- Bytes displayed in little endian order
- Numbered in order of evaluation
- Key:
  - x: any hexadecimal literal between 1 to E inclusive
  - R: the register label, between 0 to F inclusive
  - F: the hexadecimal literal F
  - c: a constant hexadecimal number between 0 to F inclusive
1. xR RR __ __             | 3 register operation
2. Fx RR __ __             | 2 register operation
3. FF xR __ __             | 1 register operation
3. FF xR __ __ cc cc cc cc | 1 register operation plus 32 bit constant
4. FF Fx __ __             | 0 register operation
4. FF Fx __ __ cc cc cc cc | 0 register operation plus 32 bit constant

+------------------------------------------------------------------------------+
| The full list of instructions, grouped according to instruction pages:       |
+------------------------------------------------------------------------------+
3 Register operations:
-----------------------
1. addr X Y Z
Full name: add register
Encoding: 1X YZ __ __
Description: Adds the contents of registers Y and Z, then stores the result in
             register X (X = Y + Z).
             Sets overflow or underflow flags.

2. subr X Y Z
Full name: subtract register
Encoding: 2D AB __ __
Description: Subtracts the contents of registers Z from Y, then stores the
             result in register X. (X = Y - Z)
             Sets overflow or underflow flags.

3. umulr X Y Z
Full name: unsigned multiply register
Encoding: 3X YZ __ __
Description: Unsigned multiplies the contents of 32 bit registers X with Y,
             storing the 64 bit result in the conjoined register Y:Z.
             (Y:Z = X * Y)

4. smulr X Y Z
Full name: signed multiply register
Encoding: 4X YZ __ __
Description: Signed multiplies the contents of 32 bit registers X with Y,
             Storing the 64 bit result in the conjoined register Y:Z
             (Y:Z = X * Y)
             Sets overflow and underflow flags. (TODO: validate this)

5. udivr X Y Z
Full name: unsigned divide register
Encoding: 5X YZ __ __
Description: Unsigned divides the contents of the registers Y with Z,
             storing the result in the register Z. (X = Y / Z)
             In case Y is zero, Z is set to the maximum unsigned 32 bit integer
             to approximate the value of infinity.
             The divide-by-zero flag is set.

6. sdivr X Y Z
Full name: signed divide register
Encoding: 6X YZ __ __
Description: Signed divides the contents of the registers Y with Z,
             storing the result in the register X. (X = Y / Z)
             In case Z is zero, X is set to the maximum or minimum signed 32 bit
             integer depending on whether Y was positive or negative,
             respectively, to approximate, albeit crudely, the value of
             infinity.
             The divide-by-zero flag is set.

7. ufixmulr X Y Z
Full name: unsigned fixed point multiply register
Encoding: 7X YZ __ __
Description: Unsigned multiplies the contents of the 32 bit registers Y and Z,
             interpreted as a fixed point number (16.16), adjusting the
             resulting number to fit within said format and storing the result
             to register X. (X = Y * Z)
             Sets the overflow flag.

8. sfixmulr X Y Z
Full name: signed fixed poiont multiply register
Encoding: 8X YZ __ __
Description: Signed multiplies the contents of the 32 bit registers Y and Z,
             interpreted as a fixed point number (16.16), adjusting the
             resulting number to fit within said format and storing the result
             in register X (X = Y * Z)
             May overflow or underflow, in which case relevant flags are set.

9. ufixdivr X Y Z
Full name: unsigned fixed point divide register
Encoding: 9X YZ __ __
Description: Unsigned divides the contents of the 32 bit registers Y and X,
             interpreted as a fixed point number (16.16), adjusting the
             resulting number to fit within said format and storing the result
             to register X. (X = Y / Z)
             In case Z is zero, X is set to the maximum signed 32 bit integer
             to approximate, albeit crudely, the value of infinity.
             Sets the divide-by-zero flag.

10. sfixdivr X Y Z
Full name: signed fixed point divide register
Encoding: AX YZ __ __
Description: Signed divides the contents of the 32 bit registers Y and Z,
             interpreted as a fixed point number (16.16), adjusting the
             resulting number to fit within said format and storing the result
             to register X. (X = Y / Z)
             In case Z is zero, X is set to the maximum or minimum signed 32 bit
             integer depending on whether Y was positive or negative,
             respectively, to approximate, albeit crudely, the value of
             infinity.
             Sets the divide-by-zero flag.

11. cfixsqrtr X Y Z
Full name: complex fixed point square root register
Encoding: BX YZ __ __
Description: Computes the square root of the contents of the register X,
             interpreted as a signed fixed point number (16.16).
             The real and imaginary components of the result are stored in
             registers Y and Z respectively.

12. reserved_instruction X Y Z
Full name: reserved instruction
Encoding: CX YZ __ __
Description: This bit combination is currently reserved. Trying to execute
             it will result in the reserved-instruction flag being set.

13. reserved_instruction X Y Z
Full name: reserved instruction
Encoding: DX YZ __ __
Description: This bit combination is currently reserved. Trying to execute
             it will result in the reserved-instruction flag being set.

14. reserved_instruction X Y Z
Full name: reserved instruction
Encoding: EX YZ __ __
Description: This bit combination is currently reserved. Trying to execute
             it will result in the reserved-instruction flag being set.

2 Register operations:
-----------------------
1. writer X Y
Full name: write register to pointer
Encoding: F1 XY __ __
Description: Writes the contents of X to the memory address pointed to by Y.
             There are no alignment restrictions of Y, but it is considered to
             be good practice to keep the alignment to the word size.

2. readr X Y
Full name: read register from pointer
Encoding: F2 XY __ __
Description: Reads the contents of X from the memory address pointed to by Y.
             There are no alignment restrictions of Y, but it is considered to
             be good practice to keep the alignment to the word size.

3. movr X Y
4. cmpr X Y
5. lshlr X Y
6. lshrr X Y
7. ashlr X Y
8. ashrr X Y
9. rolr X Y
10. rorr X Y
11. andr X Y
12. orr X Y
13. notr X Y
14. xorr X Y

1 Register operations:
-----------------------
1. read X const
2. write X const
3. mov X const
4. gotor X
5. callr X
6. cmp X const
7. lshl X const
8. lshr X const
9. ashl X const
10. ashr X const
11. rol X const
12. ror X const
13. and X const
14. or X const

0 Register operations:
-----------------------
1. nop
2. ret
3. goto const
4. jmp const
5. jge const
6. jg const
7. jle const
8. jl const
9. call const
10. callge const
11. callg const
12. callle const
13. calll const
14. reserved_instruction
